comment "spin:";

token PATH (letter|digit|[".-_/+"])+;

-- Entry point
Trace. Trace ::= [Step] "timeout" "#processes:" [Final] Integer "processes" "created";
[]. [Step] ::= ;
(:). [Step] ::= Step [Step];

Init. Proc ::= ":init:" ":" Integer; 
Fun. Proc ::= Ident ":" Integer;

Pref. Pref ::= Integer ":" "proc" Integer "(" Proc ")";
Path. Path ::= PATH ":" Integer;
State. State ::= "(" "state" Integer ")";

Stmt. Step ::= Pref Path State "[" Stmt "]";
Start. Step ::= "Starting" Ident "with" "pid" Integer;

-- Statement steps
GotoIn. Stmt ::= ".(goto)";
Goto. Stmt ::= "goto" ":" Ident;
Assign. Stmt ::= LVal "=" Exp;
Send. Stmt ::= LVal "!" [Exp];
Recv. Stmt ::= LVal "?" [Exp];
Expr. Stmt ::= Exp;
Do. Stmt ::= "DO";
Else. Stmt ::= "else";
Assert. Stmt ::= "assert" Exp;

---- Expressions
separator nonempty Exp ",";
coercions Exp 6;

---- Binary expressions
Or. Exp ::= Exp "||" Exp1;
And. Exp1 ::= Exp1 "&&" Exp2;
Eq. Exp2 ::= Exp3 "==" Exp3;
Ne. Exp2 ::= Exp3 "!=" Exp3;
Le. Exp2 ::= Exp3 "<=" Exp3;
Ge. Exp2 ::= Exp3 ">=" Exp3;
Lt. Exp2 ::= Exp3 "<" Exp3;
Gt. Exp2 ::= Exp3 ">" Exp3;
Plus. Exp3 ::= Exp3 "+" Exp4;
Minus. Exp3 ::= Exp3 "-" Exp4;
Prod. Exp4 ::= Exp4 "*" Exp5;
Div. Exp4 ::= Exp4 "/" Exp5;
And. Exp5 ::= Exp5 "&" Exp6;
Or. Exp5 ::= Exp5 "|" Exp6;

---- Unary expressions
Neg. Exp6 ::= "-" Exp7;
Not. Exp6 ::= "!" Exp7;

---- Calls
Run. Exp7 ::= "run" Ident "(" [Exp] ")";
Len. Exp7 ::= "len" "(" LVal ")";

---- Terminal expressions
Const. Exp5 ::= Integer;
Var. Exp5 ::= LVal;

---- L-Values
Id. LVal ::= Ident;
Arr. LVal ::= LVal "[" Exp "]";
Field. LVal ::= LVal "." Ident;

[]. [Final] ::= ;
(:). [Final] ::= Final [Final];

Valid. Final ::= FinalLoc "<valid end state>";
Invalid. Final ::= FinalLoc;

FinalLoc. FinalLoc ::= Pref Path State;

entrypoints Trace;